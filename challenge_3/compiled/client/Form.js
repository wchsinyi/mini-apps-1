import post from './Post.js';

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      step: 1,
      inputFieldName: {
        1: ['name', 'email', 'passcode'],
        2: ['line 1', 'line 2', 'city', 'state', 'zip code'],
        3: ['credit card #', 'expiration date', 'CVV', 'billing zip code']
      },
      inputs: {
        1: {},
        2: {},
        3: {}
      }
    };
    this.pagePlus = this.pagePlus.bind(this);
    this.grabText = this.grabText.bind(this);
    this.submitHandler = this.submitHandler.bind(this);
  }
  pagePlus(e) {
    e.preventDefault();
    if (this.state.step === 3) {
      this.setState({ step: 1 });
    } else {
      this.setState({ step: this.state.step + 1 });
    }
  }

  grabText(e, i, step) {
    i = i.split(' ').join('').replace('#', "");
    var r = this.state.inputs;
    r[step][i] = e.target.value;
    this.setState({ inputs: r });
  }

  submitHandler(e) {
    e.preventDefault();
    console.log('this.state.inputs', this.state.inputs);
    post(this.state.inputs[this.state.step]);
    this.pagePlus(e);
  }

  render() {
    var items = this.state.inputFieldName[this.state.step].map((j, idx) => {
      return React.createElement(
        'div',
        { key: (this.state.step * 10 + idx).toString() },
        React.createElement(
          'label',
          null,
          j,
          React.createElement('input', { type: 'text', onChange: e => {
              this.grabText(e, j, this.state.step);
            } })
        )
      );
    });
    return React.createElement(
      'form',
      { onSubmit: this.submitHandler },
      items,
      React.createElement('input', { type: 'submit', value: 'Submit' })
    );
  }
}

export default Form;

// {/*value={'input your ' + i}*/}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9Gb3JtLmpzeCJdLCJuYW1lcyI6WyJwb3N0IiwiRm9ybSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwic3RlcCIsImlucHV0RmllbGROYW1lIiwiaW5wdXRzIiwicGFnZVBsdXMiLCJiaW5kIiwiZ3JhYlRleHQiLCJzdWJtaXRIYW5kbGVyIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic2V0U3RhdGUiLCJpIiwic3BsaXQiLCJqb2luIiwicmVwbGFjZSIsInIiLCJ0YXJnZXQiLCJ2YWx1ZSIsImNvbnNvbGUiLCJsb2ciLCJyZW5kZXIiLCJpdGVtcyIsIm1hcCIsImoiLCJpZHgiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsSUFBUCxNQUFpQixXQUFqQjs7QUFFQSxNQUFNQyxJQUFOLFNBQW1CQyxNQUFNQyxTQUF6QixDQUFtQztBQUNqQ0MsY0FBWUMsS0FBWixFQUFtQjtBQUNqQixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsS0FBTCxHQUFhO0FBQ1hDLFlBQU0sQ0FESztBQUVYQyxzQkFBZ0I7QUFDZCxXQUFHLENBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0IsVUFBbEIsQ0FEVztBQUVkLFdBQUcsQ0FBQyxRQUFELEVBQVcsUUFBWCxFQUFxQixNQUFyQixFQUE2QixPQUE3QixFQUFzQyxVQUF0QyxDQUZXO0FBR2QsV0FBRyxDQUFDLGVBQUQsRUFBa0IsaUJBQWxCLEVBQXFDLEtBQXJDLEVBQTRDLGtCQUE1QztBQUhXLE9BRkw7QUFPWEMsY0FBUTtBQUNOLFdBQUcsRUFERztBQUVOLFdBQUcsRUFGRztBQUdOLFdBQUc7QUFIRztBQVBHLEtBQWI7QUFhQSxTQUFLQyxRQUFMLEdBQWdCLEtBQUtBLFFBQUwsQ0FBY0MsSUFBZCxDQUFtQixJQUFuQixDQUFoQjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0IsS0FBS0EsUUFBTCxDQUFjRCxJQUFkLENBQW1CLElBQW5CLENBQWhCO0FBQ0EsU0FBS0UsYUFBTCxHQUFxQixLQUFLQSxhQUFMLENBQW1CRixJQUFuQixDQUF3QixJQUF4QixDQUFyQjtBQUNEO0FBQ0RELFdBQVNJLENBQVQsRUFBWTtBQUNWQSxNQUFFQyxjQUFGO0FBQ0EsUUFBSSxLQUFLVCxLQUFMLENBQVdDLElBQVgsS0FBb0IsQ0FBeEIsRUFBMkI7QUFDekIsV0FBS1MsUUFBTCxDQUFjLEVBQUVULE1BQU0sQ0FBUixFQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS1MsUUFBTCxDQUFjLEVBQUVULE1BQU0sS0FBS0QsS0FBTCxDQUFXQyxJQUFYLEdBQWtCLENBQTFCLEVBQWQ7QUFDRDtBQUNGOztBQUVESyxXQUFTRSxDQUFULEVBQVdHLENBQVgsRUFBY1YsSUFBZCxFQUFtQjtBQUNqQlUsUUFBSUEsRUFBRUMsS0FBRixDQUFRLEdBQVIsRUFBYUMsSUFBYixDQUFrQixFQUFsQixFQUFzQkMsT0FBdEIsQ0FBOEIsR0FBOUIsRUFBbUMsRUFBbkMsQ0FBSjtBQUNBLFFBQUlDLElBQUksS0FBS2YsS0FBTCxDQUFXRyxNQUFuQjtBQUNBWSxNQUFFZCxJQUFGLEVBQVFVLENBQVIsSUFBYUgsRUFBRVEsTUFBRixDQUFTQyxLQUF0QjtBQUNBLFNBQUtQLFFBQUwsQ0FBYyxFQUFDUCxRQUFRWSxDQUFULEVBQWQ7QUFDRDs7QUFFRFIsZ0JBQWNDLENBQWQsRUFBZ0I7QUFDZEEsTUFBRUMsY0FBRjtBQUNBUyxZQUFRQyxHQUFSLENBQVksbUJBQVosRUFBZ0MsS0FBS25CLEtBQUwsQ0FBV0csTUFBM0M7QUFDQVQsU0FBSyxLQUFLTSxLQUFMLENBQVdHLE1BQVgsQ0FBa0IsS0FBS0gsS0FBTCxDQUFXQyxJQUE3QixDQUFMO0FBQ0EsU0FBS0csUUFBTCxDQUFjSSxDQUFkO0FBQ0Q7O0FBRURZLFdBQVM7QUFDUCxRQUFJQyxRQUFRLEtBQUtyQixLQUFMLENBQVdFLGNBQVgsQ0FBMEIsS0FBS0YsS0FBTCxDQUFXQyxJQUFyQyxFQUEyQ3FCLEdBQTNDLENBQStDLENBQUNDLENBQUQsRUFBSUMsR0FBSixLQUFZO0FBQ3JFLGFBQVE7QUFBQTtBQUFBLFVBQUssS0FBTSxDQUFDLEtBQUt4QixLQUFMLENBQVdDLElBQVgsR0FBZ0IsRUFBaEIsR0FBbUJ1QixHQUFwQixFQUF5QkMsUUFBekIsRUFBWDtBQUNOO0FBQUE7QUFBQTtBQUNHRixXQURIO0FBRUUseUNBQU8sTUFBSyxNQUFaLEVBQW1CLFVBQVlmLENBQUQsSUFBTTtBQUFDLG1CQUFLRixRQUFMLENBQWNFLENBQWQsRUFBaUJlLENBQWpCLEVBQW9CLEtBQUt2QixLQUFMLENBQVdDLElBQS9CO0FBQXFDLGFBQTFFO0FBRkY7QUFETSxPQUFSO0FBTUQsS0FQVyxDQUFaO0FBUUEsV0FDRTtBQUFBO0FBQUEsUUFBTSxVQUFVLEtBQUtNLGFBQXJCO0FBQ0djLFdBREg7QUFFRSxxQ0FBTyxNQUFLLFFBQVosRUFBcUIsT0FBTSxRQUEzQjtBQUZGLEtBREY7QUFNRDtBQTFEZ0M7O0FBOERuQyxlQUFlMUIsSUFBZjs7QUFZQSIsImZpbGUiOiJGb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBvc3QgZnJvbSAnLi9Qb3N0LmpzJ1xuXG5jbGFzcyBGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0ZXA6IDEsXG4gICAgICBpbnB1dEZpZWxkTmFtZToge1xuICAgICAgICAxOiBbJ25hbWUnLCAnZW1haWwnLCAncGFzc2NvZGUnXSxcbiAgICAgICAgMjogWydsaW5lIDEnLCAnbGluZSAyJywgJ2NpdHknLCAnc3RhdGUnLCAnemlwIGNvZGUnXSxcbiAgICAgICAgMzogWydjcmVkaXQgY2FyZCAjJywgJ2V4cGlyYXRpb24gZGF0ZScsICdDVlYnLCAnYmlsbGluZyB6aXAgY29kZSddXG4gICAgICB9LFxuICAgICAgaW5wdXRzOiB7XG4gICAgICAgIDE6IHt9LFxuICAgICAgICAyOiB7fSxcbiAgICAgICAgMzoge31cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5wYWdlUGx1cyA9IHRoaXMucGFnZVBsdXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmdyYWJUZXh0ID0gdGhpcy5ncmFiVGV4dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3VibWl0SGFuZGxlciA9IHRoaXMuc3VibWl0SGFuZGxlci5iaW5kKHRoaXMpO1xuICB9XG4gIHBhZ2VQbHVzKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMuc3RhdGUuc3RlcCA9PT0gMykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0ZXA6IDEgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0ZXA6IHRoaXMuc3RhdGUuc3RlcCArIDEgfSlcbiAgICB9XG4gIH1cblxuICBncmFiVGV4dChlLGksIHN0ZXApe1xuICAgIGkgPSBpLnNwbGl0KCcgJykuam9pbignJykucmVwbGFjZSgnIycsIFwiXCIpXG4gICAgdmFyIHIgPSB0aGlzLnN0YXRlLmlucHV0cztcbiAgICByW3N0ZXBdW2ldID0gZS50YXJnZXQudmFsdWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7aW5wdXRzOiByfSk7XG4gIH1cblxuICBzdWJtaXRIYW5kbGVyKGUpe1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zb2xlLmxvZygndGhpcy5zdGF0ZS5pbnB1dHMnLHRoaXMuc3RhdGUuaW5wdXRzKTtcbiAgICBwb3N0KHRoaXMuc3RhdGUuaW5wdXRzW3RoaXMuc3RhdGUuc3RlcF0pO1xuICAgIHRoaXMucGFnZVBsdXMoZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdmFyIGl0ZW1zID0gdGhpcy5zdGF0ZS5pbnB1dEZpZWxkTmFtZVt0aGlzLnN0YXRlLnN0ZXBdLm1hcCgoaiwgaWR4KSA9PiB7XG4gICAgICByZXR1cm4gKDxkaXYga2V5PXsgKHRoaXMuc3RhdGUuc3RlcCoxMCtpZHgpLnRvU3RyaW5nKCl9PlxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAge2p9XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgb25DaGFuZ2U9eyAoZSk9PiB7dGhpcy5ncmFiVGV4dChlLCBqLCB0aGlzLnN0YXRlLnN0ZXApfSAgfSAgLz4gXG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2Rpdj4pXG4gICAgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLnN1Ym1pdEhhbmRsZXJ9PlxuICAgICAgICB7aXRlbXN9XG4gICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJTdWJtaXRcIiAvPlxuICAgICAgPC9mb3JtPlxuICAgIClcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEZvcm07XG5cblxuXG5cblxuXG5cblxuXG5cblxuLy8gey8qdmFsdWU9eydpbnB1dCB5b3VyICcgKyBpfSovfSAiXX0=